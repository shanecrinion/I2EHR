kmeans == hclust
kmeans_results == hclust_results
# Number of samples that are placed in same or different cluster.
same_cluster =
length(which((
kmeans_results == hclust_results)[,2]))
different_cluster =
length(which((kmeans_results != hclust_results)[,2]))
total_samples_in_all_cluster =
length(kmeans_results[,2])
draw.pairwise.venn(total_samples_in_all_cluster, total_samples_in_all_cluster, same_cluster)
grid.newpage()
draw.pairwise.venn(
total_samples_in_all_cluster,
total_samples_in_all_cluster,
same_cluster)
grid.newpage()
draw.pairwise.venn(
total_samples_in_all_cluster,
total_samples_in_all_cluster,
same_cluster,
category = c('kmeans', 'hclust'))
same_cluster
grid.newpage()
draw.pairwise.venn(
total_samples_in_all_cluster,
total_samples_in_all_cluster,
same_cluster,
category = c('kmeans', 'hclust'))
length(which((kmeans_results != hclust_results)[,2]))
head(kmeans_results)
kmeans_results[1,]
kmeans_results[,1]
kmeans[kmeans_results[,1] != hclust_results[,1]]
kmeans[kmeans_results[,1] != hclust_results[,1],]
kmeans[,kmeans_results[,1] != hclust_results[,1]]
diff(kmeans_results, kmeans_results)
names(kmeans_results)
list(kmeans_results[,1])
which((kmeans_results != hclust_results)[,2])
which((kmeans_results != hclust_results))
kmeans_results
kmeans_results[,1]
hclust_results[,1]
kmeans_results[,1]
kmeans_results[,2]
kmeans_results[,1]
which((kmeans_results != hclust_results))[,1]
which((kmeans_results != hclust_results)[,1])
which((kmeans_results != hclust_results))
which((kmeans_results != hclust_results)[,1])
which((kmeans_results != hclust_results)[,2])
which((kmeans_results != hclust_results)[,0])
head(kmeans_results)
head(hclust_results)
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
plyr::count(kmeans_results == hclust_results)[,1]
plyr::
plyr::count(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
count(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
plyr::count(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
plyr::count(kmeans_results == hclust_results)[,2]
#Perform an element wise comparison between the 2 columns
plyr::count(kmeans_results == hclust_results)[,3]
#Perform an element wise comparison between the 2 columns
plyr::count(kmeans_results == hclust_results)[,2]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,4]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,3]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,2]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,1]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,1]
#Perform an element wise comparison between the 2 columns
kmeans_results == hclust_results[,2]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,2]
kmeans_results[,2]
kmeans_results[,1]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,1]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,2]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,3]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,2]
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,1]
length(which((
kmeans_results == hclust_results)[,1]))
venn_same =
length(which((
kmeans_results == hclust_results)[,1]))
venn_diff =
length(which((kmeans_results != hclust_results)[,1]))
# Number of samples that are placed in same or different cluster.
venn_same =
length(which((
kmeans_results == hclust_results)[,1]))
venn_diff =
length(which((kmeans_results != hclust_results)[,1]))
venn_total =
length(kmeans_results[,2])
grid.newpage()
draw.pairwise.venn(
total_samples_in_all_cluster,
different_cluster,
same_cluster,
category = c('kmeans', 'hclust'))
grid.newpage()
draw.pairwise.venn(
venn_total,
venn_diff,
venn_same,
category = c('kmeans', 'hclust'))
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical=clin_file,
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHRv2/GSE46097.clinical.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
library(multiClust)
library(GEOquery)
genomic_path <- "/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHRv2/GSE46097_series_matrix.txt.gz"
genomic_data <- getGEO(filename=genomic_path, GSEMatrix=TRUE)
genomic_data.exprs <- exprs(genomic_data)
genomic_data.pheno <- pData(genomic_data)
WriteMatrixToFile(tmpMatrix=genomic_data.exprs, tmpFileName="GSE46097.expression.txt", blnRowNames =TRUE,blnColNames=TRUE) #contains GSM values
WriteMatrixToFile(tmpMatrix=genomic_data.pheno, tmpFileName="GSE46097.clinical.txt",
blnRowNames=TRUE, blnColNames=TRUE)
exprs <- input_file('/Users/shanecrinion/GSE46097.expression.txt')
# Example 3: Choosing the polynomial selected gene probes in a dataset
# Obtain gene expression matrix
exprs.filepath <- '/Users/shanecrinion/GSE46097.expression.txt'
start_time <- Sys.time()
probes_num <- number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=NULL,
Percent=NULL,
Poly=TRUE, Adaptive=NULL)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
ranked.exprs <- probe_ranking(
input = exprs.filepath,
probe_number = 859,
probe_num_selection="Poly_Probe_Num",
data.exp = exprs,
method = 'CV_Guided')
end_time <- Sys.time()
end_time - start_time
dim(ranked.exprs)
cluster_num <- number_clusters(data.exp=exprs,
Fixed=3,
gap_statistic=NULL)
# Call the cluster_analysis function
start_time <- Sys.time()
hclust_analysis <-
cluster_analysis(sel.exp=ranked.exprs,
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
gene_distance="correlation",
num_clusters=3,
data_name="GSE46097 CVD",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
end_time <- Sys.time()
end_time - start_time
# Call the cluster_analysis function
kmeans_analysis <-
cluster_analysis(
sel.exp=ranked.exprs,
cluster_type="Kmeans",
distance=NULL,
linkage_type=NULL,
gene_distance=NULL,
num_clusters=3,
data_name="GSE46097 CVD",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
# Call the avg_probe_exp function
avg_matrix_kmeans <- avg_probe_exp(
sel.exp=ranked.exprs,
samp_cluster=kmeans_analysis,
data_name="GSE46097 CVD",
cluster_type="Kmeans",
distance=NULL,
linkage_type=NULL,
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
dim(avg_matrix_kmeans)
# Call the avg_probe_exp function
avg_matrix_hclust <- avg_probe_exp(
sel.exp=ranked.exprs,
samp_cluster=hclust_analysis,
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
rownames(avg_matrix_hclust)
#install.packages('VennDiagram')
library(VennDiagram)
kmeans_results <- read.csv('Kmeans.csv', header=T)
hclust_results <- read.csv('HClust.csv' ,header=T)
head(hclust_results)
#Perform an element wise comparison between the 2 columns
(kmeans_results == hclust_results)[,1]
# Number of samples that are placed in same or different cluster.
venn_same =
length(which((
kmeans_results == hclust_results)[,1]))
venn_diff =
length(which((kmeans_results != hclust_results)[,1]))
venn_total =
length(kmeans_results[,2])
grid.newpage()
draw.pairwise.venn(
venn_total,
venn_diff,
venn_same,
category = c('kmeans', 'hclust'))
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/GSE46097.clinical.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
head(ranked.exprs)
rownames(ranked.exprs)
colnames(ranked.exprs)
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE302019-DFS-Clinical-Outcome.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
read.table('/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt')
read.table('/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt')
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
surv
surv
list.files()
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
surv
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
surv
# Call the avg_probe_exp function
surv <- surv_analysis(
samp_cluster=hclust_analysis,
clinical='/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHR_APP/GSE46097-Clinical-Outcome-NoID.txt',
survival_type="DFS",
data_name="GSE46097 CVD",
cluster_type="HClust",
distance="euclidean",
linkage_type="ward.D2",
probe_rank="CV_Guided",
probe_num_selection="Poly_Probe_Num",
cluster_num_selection="Fixed_Clust_Num")
surv
knitr::opts_chunk$set(echo = TRUE)
library(multiClust)
library(GEOquery)
genomic_path <- "/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHRv2/GSE46097_series_matrix.txt.gz"
genomic_data <- getGEO(filename=genomic_path, GSEMatrix=TRUE)
genomic_data.exprs <- exprs(genomic_data)
genomic_data.pheno <- pData(genomic_data)
exprs <- input_file('/Users/shanecrinion/GSE46097.expression.txt')
source('/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHRv2/processes.R')
probe_exprs <-  # replace this with the multiclust command
data.frame(
rowMeans(
Biobase::exprs(subEset(
eSet=genomic_data,
subset=list(
phenotype =c("Matched Control Group"))))),
rowMeans(
Biobase::exprs(subEset(
eSet=genomic_data,
subset=list(
phenotype =c("Matched Ornish Participant")))))
)
probe_exprs$PROBEID <- rownames(probe_exprs)
gene_exprs <-
merge(probe_exprs,
genomic_annotation,
by.x='PROBEID', by.y='PROBEID')
names(gene_exprs) <- c('probe', 'exprs_controls',
'exprs_cases', 'gene',
'gene_name')
gene_exprs$exprs_log_change <-
log(gene_exprs$exprs_cases /
gene_exprs$exprs_controls)
attach(gene_exprs)
plot(density(head(gene_exprs[order(-gene_exprs$exprs_log_change),],15)$exprs_cases))
plot(density(head(gene_exprs[order(-gene_exprs$exprs_log_change),],15)$exprs_controls))
observations_counts <-
plyr::count(observations$DESCRIPTION)
observations_counts[order(-observations_counts$freq),]
gene_exprs[order(-gene_exprs$exprs_log_change),]
library(shiny)
ui <- radioButtons('probe_selection',
'Select the desired probe number selection approach.
Using probe_array function to select the most important probes.
The ranking methods are:
CV_rank (coefficient of variation of entire dataset, the sd:mean ratio),
CV_guided (CV for each probe to select for probes),
SD_rank (probes w/ highest SD) or
Poly (fits 3 second degree polynomial functions
based on the dataset mean and standard deviation)',
c('CV_rank', 'CV_guided', 'SD_rank', 'Poly'))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
}
shinyApp(ui,server)
library(shiny)
ui <- radioButtons('probe_selection',
'Select the desired probe number selection approach)',
c('CV_rank', 'CV_guided', 'SD_rank', 'Poly'))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
probes_num <-
number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=NULL,
Percent=50,
Poly=NULL,
Adaptive=NULL)
probes_num
}
shinyApp(ui,server)
library(shiny)
ui <- radioButtons('probe_selection',
'Select the desired probe number selection approach)',
c('CV_rank', 'CV_guided', 'SD_rank', 'Poly'))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
probes_num <-
number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=NULL,
Percent=50,
Poly=NULL,
Adaptive=NULL)
probes_num
}
shinyApp(ui,server)
library(shiny)
ui <- {radioButtons('probe_selection',
'Select the desired probe number selection approach)',
c('CV_rank', 'CV_guided', 'SD_rank', 'Poly')),
textOutput(
'probe_num',
probes_num <-
number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=NULL,
Percent=50,
Poly=NULL,
Adaptive=NULL)
probes_num}
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
}
shinyApp(ui,server)
probes_num <-
number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=300,
Percent=NULL,
Poly=NULL,
Adaptive=NULL)
probes_num
nrow(procedures)
class(hclust_analysis)
radioButtons('genomic_data_import',
choices = c('local','GEO'),
label = 'Source of genomic data:',
inline = TRUE)
if (input$genomic_data_import=='local'){
helpText('Genomic data is stored locally. Enter the file path below:')
} else {
helpText('Genomic data is stored on GEO Enter the GEO accession below:')
}
options(shiny.maxRequestSize=100*1024^2)
options(shiny.maxRequestSize=100*1024^2)
options(shiny.maxRequestSize)
options(shiny.maxRequestSize)
shiny.maxRequestSize
maxRequestSize
library(multiClust)
library(GEOquery)
exprs <- input_file('/Users/shanecrinion/GSE46097.expression.txt')
# Example 3: Choosing the polynomial selected gene probes in a dataset
# Obtain gene expression matrix
exprs.filepath <- '/Users/shanecrinion/GSE46097.expression.txt'
start_time <- Sys.time()
probes_num <- number_probes(
input=exprs.filepath,
data.exp=exprs,
Fixed=NULL,
Percent=NULL,
Poly=TRUE, Adaptive=NULL)
end_time <- Sys.time()
end_time - start_time
getwd()
getwd()
setwd('/Users/shanecrinion/Documents/business/projects/I2EHR/I2EHRv2/preload_example/')
multiClust::input_file('GSE46097.expression.txt')
